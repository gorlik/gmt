SYMBOLS {
    __STACKSIZE__: value = $0800, type = weak ; # 2k stack
}
MEMORY {
    ZP:		start = $0002, size = $001A, type = rw, define = yes;
#The ROM header goes here.
    CHEADER:	start = $0000, size = $0040, type = ro, file = %O, fill=yes;
#The ROM segment header goes here.  There is only one.
    ROMCHIP:	start = $0000, size = $0010, type = ro, file = %O, fill=yes;
#8k catridge data.
    ROM:	start = $8000, size = $2000, file = %O, fill=yes, define = yes;
#Usable RAM for data.
    RAM:	start = $0800, size = $7800, type = rw, define = yes;
#Data at $C000.  Not normally used but made available to your cartridge.
#Top 2k is for the stack.
    HIRAM:	start = $C000, size = $1000-__STACKSIZE__, type = rw;
}
SEGMENTS {
#Cartridge ID and settings
    HEADERDATA:	load = CHEADER, type = ro;
    CHIP0:	load = ROMCHIP, type = ro;
#-----------------------------------------
    STARTUP:	load = ROM, type = ro;
    LOWCODE:	load = ROM, type = ro,               optional = yes;
    INIT:	load = ROM, type = ro, define = yes, optional = yes;
    CODE:	load = ROM, type = ro;
    RODATA:	load = ROM, type = ro;
    ONCE:       load = ROM, type ro, define = yes;
    DATA:	load = ROM, run = RAM, type = rw, define = yes;
#    ZPSAVE:	load = RAM, type = bss; #Not needed.
    BSS:	load = RAM, type = bss, define = yes;
    HEAP:	load = RAM, type = bss, optional = yes; # must sit just below stack
#Data stored at $C000.
    BSSHI:	load = HIRAM, type = bss, define = yes, optional = yes;
    ZEROPAGE:	load = ZP,  type = zp;
}
FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = interruptor,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}


